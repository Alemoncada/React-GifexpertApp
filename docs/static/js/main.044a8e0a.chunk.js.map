{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAoB5C,OAEI,sBAAMC,SAdU,SAACC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACrCN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAWH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAMDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACvB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdxB,kBAmBbM,GAnBa,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEjC,OACI,sBAAKc,UAAU,2DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDhBwBK,CAAa1B,GAAhCa,EAFuB,EAE5BN,KAAaa,EAFe,EAEfA,QAGpB,OACI,qCAEI,oBAAIJ,UAAU,2DAAd,SAA0EhB,IAEzEoB,GAAW,mBAAGJ,UAAU,yCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OAEX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aElBxBgB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,mBAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAK9B,OACI,qCACI,2CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAED,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OAClB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCdjC6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.044a8e0a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputValue = (e) =>{\n        setInputValue(e.target.value)\n    }\n\n    const hadleSubmit = (e)=>{\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            \n            setCategories(cats =>[inputValue, ...cats] );\n            setInputValue('');\n       }\n        \n\n    }\n\n    return (\n\n        <form onSubmit={hadleSubmit}>\n            <input\n                type='text'\n                value={inputValue}\n                onChange={ handleInputValue }\n            />\n\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=3qK4pgkySo4YURupQQIyKjhz27j4XBwI`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    \n\n   \n\n    const gifs = data.map(img =>{\n         return {\n             id: img.id,\n             title: img.title,\n             url: img.images?.downsized_medium.url\n         }\n\n     })\n\n   return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url}) => {\n    \n    return (\n        <div className='card animate__animated animate__fadeIn animate__delay-2s'>\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => { \n        \n    const {data:images, loading }= useFetchGifs(category);\n    \n    \n    return (\n        <>\n        \n            <h3 className='card animate__animated animate__fadeIn animate__delay-2s'>{category}</h3>\n\n            {loading && <p className='card animate__animated animate__fadeIn'>Loading</p>}\n\n            <div className='card-grid'>\n                \n                {\n                    images.map( img =>(\n\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                            \n                        />\n                    ))\n                }\n                \n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true, \n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs =>{\n                setstate({\n                    data: imgs,\n                    loading: false,\n                });\n            });\n        \n    }, [category])\n\n    return state \n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Rick and Morty']);\n   \n\n    return (\n        <>\n            <h2>GifExpert</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />  \n\n           <ol>\n               {\n                   categories.map(category =>(\n                        <GifGrid  \n                            key={category}                        \n                            category={category}/>\n                    ))\n               }\n           </ol>\n\n        </>\n    )\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}